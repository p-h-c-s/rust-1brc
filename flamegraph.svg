<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="229.00"> </text><svg id="frames" x="10" width="1180" total_samples="33042"><g><title>libsystem_malloc.dylib`_free (544 samples, 1.65%)</title><rect x="0.0030%" y="117" width="1.6464%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="544"/><text x="0.2530%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (81 samples, 0.25%)</title><rect x="1.6494%" y="117" width="0.2451%" height="15" fill="rgb(217,0,24)" fg:x="545" fg:w="81"/><text x="1.8994%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3,920 samples, 11.86%)</title><rect x="1.9036%" y="117" width="11.8637%" height="15" fill="rgb(221,193,54)" fg:x="629" fg:w="3920"/><text x="2.1536%" y="127.50">libsystem_platform..</text></g><g><title>rust-1brc`&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="13.7673%" y="117" width="0.0212%" height="15" fill="rgb(248,212,6)" fg:x="4549" fg:w="7"/><text x="14.0173%" y="127.50"></text></g><g><title>rust-1brc`DYLD-STUB$$free (108 samples, 0.33%)</title><rect x="13.7885%" y="117" width="0.3269%" height="15" fill="rgb(208,68,35)" fg:x="4556" fg:w="108"/><text x="14.0385%" y="127.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcmp (705 samples, 2.13%)</title><rect x="14.1154%" y="117" width="2.1336%" height="15" fill="rgb(232,128,0)" fg:x="4664" fg:w="705"/><text x="14.3654%" y="127.50">r..</text></g><g><title>rust-1brc`core::str::pattern::StrSearcher::new (24 samples, 0.07%)</title><rect x="16.2520%" y="117" width="0.0726%" height="15" fill="rgb(207,160,47)" fg:x="5370" fg:w="24"/><text x="16.5020%" y="127.50"></text></g><g><title>rust-1brc`rust_1brc::StationData::parse_data (82 samples, 0.25%)</title><rect x="16.3247%" y="117" width="0.2482%" height="15" fill="rgb(228,23,34)" fg:x="5394" fg:w="82"/><text x="16.5747%" y="127.50"></text></g><g><title>rust-1brc`std::io::append_to_string (239 samples, 0.72%)</title><rect x="16.5728%" y="117" width="0.7233%" height="15" fill="rgb(218,30,26)" fg:x="5476" fg:w="239"/><text x="16.8228%" y="127.50"></text></g><g><title>rust-1brc`std::sync::mpmc::Sender&lt;T&gt;::send (15 samples, 0.05%)</title><rect x="17.2962%" y="117" width="0.0454%" height="15" fill="rgb(220,122,19)" fg:x="5715" fg:w="15"/><text x="17.5462%" y="127.50"></text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::recv (46 samples, 0.14%)</title><rect x="17.3416%" y="117" width="0.1392%" height="15" fill="rgb(250,228,42)" fg:x="5730" fg:w="46"/><text x="17.5916%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (15 samples, 0.05%)</title><rect x="43.9350%" y="101" width="0.0454%" height="15" fill="rgb(240,193,28)" fg:x="14517" fg:w="15"/><text x="44.1850%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.01%)</title><rect x="43.9804%" y="101" width="0.0121%" height="15" fill="rgb(216,20,37)" fg:x="14532" fg:w="4"/><text x="44.2304%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (504 samples, 1.53%)</title><rect x="43.9985%" y="101" width="1.5253%" height="15" fill="rgb(206,188,39)" fg:x="14538" fg:w="504"/><text x="44.2485%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (883 samples, 2.67%)</title><rect x="45.5239%" y="101" width="2.6724%" height="15" fill="rgb(217,207,13)" fg:x="15042" fg:w="883"/><text x="45.7739%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc (17 samples, 0.05%)</title><rect x="48.2083%" y="101" width="0.0514%" height="15" fill="rgb(231,73,38)" fg:x="15929" fg:w="17"/><text x="48.4583%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (811 samples, 2.45%)</title><rect x="48.2689%" y="101" width="2.4545%" height="15" fill="rgb(225,20,46)" fg:x="15949" fg:w="811"/><text x="48.5189%" y="111.50">li..</text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.01%)</title><rect x="50.7294%" y="101" width="0.0121%" height="15" fill="rgb(210,31,41)" fg:x="16762" fg:w="4"/><text x="50.9794%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (12 samples, 0.04%)</title><rect x="50.7415%" y="101" width="0.0363%" height="15" fill="rgb(221,200,47)" fg:x="16766" fg:w="12"/><text x="50.9915%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (359 samples, 1.09%)</title><rect x="50.7778%" y="101" width="1.0865%" height="15" fill="rgb(226,26,5)" fg:x="16778" fg:w="359"/><text x="51.0278%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (41 samples, 0.12%)</title><rect x="51.8643%" y="101" width="0.1241%" height="15" fill="rgb(249,33,26)" fg:x="17137" fg:w="41"/><text x="52.1143%" y="111.50"></text></g><g><title>rust-1brc`&lt;alloc::string::String as core::clone::Clone&gt;::clone (43 samples, 0.13%)</title><rect x="51.9884%" y="101" width="0.1301%" height="15" fill="rgb(235,183,28)" fg:x="17178" fg:w="43"/><text x="52.2384%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.01%)</title><rect x="52.1064%" y="85" width="0.0121%" height="15" fill="rgb(221,5,38)" fg:x="17217" fg:w="4"/><text x="52.3564%" y="95.50"></text></g><g><title>rust-1brc`DYLD-STUB$$malloc (70 samples, 0.21%)</title><rect x="52.1185%" y="101" width="0.2119%" height="15" fill="rgb(247,18,42)" fg:x="17221" fg:w="70"/><text x="52.3685%" y="111.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcmp (5 samples, 0.02%)</title><rect x="52.3304%" y="101" width="0.0151%" height="15" fill="rgb(241,131,45)" fg:x="17291" fg:w="5"/><text x="52.5804%" y="111.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcpy (47 samples, 0.14%)</title><rect x="52.3455%" y="101" width="0.1422%" height="15" fill="rgb(249,31,29)" fg:x="17296" fg:w="47"/><text x="52.5955%" y="111.50"></text></g><g><title>rust-1brc`__rdl_alloc (77 samples, 0.23%)</title><rect x="52.4877%" y="101" width="0.2330%" height="15" fill="rgb(225,111,53)" fg:x="17343" fg:w="77"/><text x="52.7377%" y="111.50"></text></g><g><title>rust-1brc`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (142 samples, 0.43%)</title><rect x="52.7238%" y="101" width="0.4298%" height="15" fill="rgb(238,160,17)" fg:x="17421" fg:w="142"/><text x="52.9738%" y="111.50"></text></g><g><title>rust-1brc`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (194 samples, 0.59%)</title><rect x="53.1536%" y="101" width="0.5871%" height="15" fill="rgb(214,148,48)" fg:x="17563" fg:w="194"/><text x="53.4036%" y="111.50"></text></g><g><title>rust-1brc`core::slice::memchr::memchr_aligned (15 samples, 0.05%)</title><rect x="53.7407%" y="101" width="0.0454%" height="15" fill="rgb(232,36,49)" fg:x="17757" fg:w="15"/><text x="53.9907%" y="111.50"></text></g><g><title>rust-1brc`core::str::converts::from_utf8 (72 samples, 0.22%)</title><rect x="53.7861%" y="101" width="0.2179%" height="15" fill="rgb(209,103,24)" fg:x="17772" fg:w="72"/><text x="54.0361%" y="111.50"></text></g><g><title>rust-1brc`core::str::pattern::StrSearcher::new (244 samples, 0.74%)</title><rect x="54.0040%" y="101" width="0.7385%" height="15" fill="rgb(229,88,8)" fg:x="17844" fg:w="244"/><text x="54.2540%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (160 samples, 0.48%)</title><rect x="59.2882%" y="85" width="0.4842%" height="15" fill="rgb(213,181,19)" fg:x="19590" fg:w="160"/><text x="59.5382%" y="95.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcmp (67 samples, 0.20%)</title><rect x="59.7724%" y="85" width="0.2028%" height="15" fill="rgb(254,191,54)" fg:x="19750" fg:w="67"/><text x="60.0224%" y="95.50"></text></g><g><title>rust-1brc`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,066 samples, 3.23%)</title><rect x="59.9752%" y="85" width="3.2262%" height="15" fill="rgb(241,83,37)" fg:x="19817" fg:w="1066"/><text x="60.2252%" y="95.50">rus..</text></g><g><title>rust-1brc`core::num::dec2flt::parse::parse_number (740 samples, 2.24%)</title><rect x="60.9618%" y="69" width="2.2396%" height="15" fill="rgb(233,36,39)" fg:x="20143" fg:w="740"/><text x="61.2118%" y="79.50">r..</text></g><g><title>rust-1brc`core::num::dec2flt::parse::parse_number (30 samples, 0.09%)</title><rect x="63.2014%" y="85" width="0.0908%" height="15" fill="rgb(226,3,54)" fg:x="20883" fg:w="30"/><text x="63.4514%" y="95.50"></text></g><g><title>rust-1brc`rust_1brc::StationData::parse_data (3,464 samples, 10.48%)</title><rect x="54.7424%" y="101" width="10.4836%" height="15" fill="rgb(245,192,40)" fg:x="18088" fg:w="3464"/><text x="54.9924%" y="111.50">rust-1brc`rust_..</text></g><g><title>rust-1brc`core::str::pattern::StrSearcher::new (639 samples, 1.93%)</title><rect x="63.2922%" y="85" width="1.9339%" height="15" fill="rgb(238,167,29)" fg:x="20913" fg:w="639"/><text x="63.5422%" y="95.50">r..</text></g><g><title>libsystem_kernel.dylib`read (976 samples, 2.95%)</title><rect x="67.1660%" y="85" width="2.9538%" height="15" fill="rgb(232,182,51)" fg:x="22193" fg:w="976"/><text x="67.4160%" y="95.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (603 samples, 1.82%)</title><rect x="70.1198%" y="85" width="1.8250%" height="15" fill="rgb(231,60,39)" fg:x="23169" fg:w="603"/><text x="70.3698%" y="95.50">l..</text></g><g><title>rust-1brc`DYLD-STUB$$memcpy (84 samples, 0.25%)</title><rect x="71.9448%" y="85" width="0.2542%" height="15" fill="rgb(208,69,12)" fg:x="23772" fg:w="84"/><text x="72.1948%" y="95.50"></text></g><g><title>rust-1brc`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (180 samples, 0.54%)</title><rect x="72.1990%" y="85" width="0.5448%" height="15" fill="rgb(235,93,37)" fg:x="23856" fg:w="180"/><text x="72.4490%" y="95.50"></text></g><g><title>rust-1brc`core::slice::memchr::memchr_aligned (3,288 samples, 9.95%)</title><rect x="72.7438%" y="85" width="9.9510%" height="15" fill="rgb(213,116,39)" fg:x="24036" fg:w="3288"/><text x="72.9938%" y="95.50">rust-1brc`core..</text></g><g><title>rust-1brc`std::io::append_to_string (8,231 samples, 24.91%)</title><rect x="65.2261%" y="101" width="24.9107%" height="15" fill="rgb(222,207,29)" fg:x="21552" fg:w="8231"/><text x="65.4761%" y="111.50">rust-1brc`std::io::append_to_string</text></g><g><title>rust-1brc`core::str::converts::from_utf8 (2,459 samples, 7.44%)</title><rect x="82.6948%" y="85" width="7.4420%" height="15" fill="rgb(206,96,30)" fg:x="27324" fg:w="2459"/><text x="82.9448%" y="95.50">rust-1brc`..</text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.05%)</title><rect x="90.1761%" y="85" width="0.0514%" height="15" fill="rgb(218,138,4)" fg:x="29796" fg:w="17"/><text x="90.4261%" y="95.50"></text></g><g><title>libdispatch.dylib`_dispatch_semaphore_signal_slow (627 samples, 1.90%)</title><rect x="90.6362%" y="69" width="1.8976%" height="15" fill="rgb(250,191,14)" fg:x="29948" fg:w="627"/><text x="90.8862%" y="79.50">l..</text></g><g><title>libsystem_kernel.dylib`semaphore_signal_trap (626 samples, 1.89%)</title><rect x="90.6392%" y="53" width="1.8946%" height="15" fill="rgb(239,60,40)" fg:x="29949" fg:w="626"/><text x="90.8892%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.02%)</title><rect x="92.5701%" y="37" width="0.0151%" height="15" fill="rgb(206,27,48)" fg:x="30587" fg:w="5"/><text x="92.8201%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.10%)</title><rect x="92.5337%" y="69" width="0.1029%" height="15" fill="rgb(225,35,8)" fg:x="30575" fg:w="34"/><text x="92.7837%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.08%)</title><rect x="92.5580%" y="53" width="0.0787%" height="15" fill="rgb(250,213,24)" fg:x="30583" fg:w="26"/><text x="92.8080%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (17 samples, 0.05%)</title><rect x="92.5852%" y="37" width="0.0514%" height="15" fill="rgb(247,123,22)" fg:x="30592" fg:w="17"/><text x="92.8352%" y="47.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (43 samples, 0.13%)</title><rect x="92.6457%" y="69" width="0.1301%" height="15" fill="rgb(231,138,38)" fg:x="30612" fg:w="43"/><text x="92.8957%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (42 samples, 0.13%)</title><rect x="92.6488%" y="53" width="0.1271%" height="15" fill="rgb(231,145,46)" fg:x="30613" fg:w="42"/><text x="92.8988%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="92.7789%" y="69" width="0.0212%" height="15" fill="rgb(251,118,11)" fg:x="30656" fg:w="7"/><text x="93.0289%" y="79.50"></text></g><g><title>rust-1brc`std::sync::mpmc::Sender&lt;T&gt;::send (884 samples, 2.68%)</title><rect x="90.1368%" y="101" width="2.6754%" height="15" fill="rgb(217,147,25)" fg:x="29783" fg:w="884"/><text x="90.3868%" y="111.50">ru..</text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::send (849 samples, 2.57%)</title><rect x="90.2427%" y="85" width="2.5695%" height="15" fill="rgb(247,81,37)" fg:x="29818" fg:w="849"/><text x="90.4927%" y="95.50">ru..</text></g><g><title>libsystem_kernel.dylib`__ulock_wait2 (8 samples, 0.02%)</title><rect x="93.3690%" y="69" width="0.0242%" height="15" fill="rgb(209,12,38)" fg:x="30851" fg:w="8"/><text x="93.6190%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.01%)</title><rect x="93.3933%" y="69" width="0.0121%" height="15" fill="rgb(227,1,9)" fg:x="30859" fg:w="4"/><text x="93.6433%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.02%)</title><rect x="93.4598%" y="53" width="0.0182%" height="15" fill="rgb(248,47,43)" fg:x="30881" fg:w="6"/><text x="93.7098%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (57 samples, 0.17%)</title><rect x="93.3146%" y="85" width="0.1725%" height="15" fill="rgb(221,10,30)" fg:x="30833" fg:w="57"/><text x="93.5646%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27 samples, 0.08%)</title><rect x="93.4054%" y="69" width="0.0817%" height="15" fill="rgb(210,229,1)" fg:x="30863" fg:w="27"/><text x="93.6554%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.04%)</title><rect x="93.4871%" y="85" width="0.0393%" height="15" fill="rgb(222,148,37)" fg:x="30890" fg:w="13"/><text x="93.7371%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="93.5355%" y="85" width="0.0121%" height="15" fill="rgb(234,67,33)" fg:x="30906" fg:w="4"/><text x="93.7855%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.02%)</title><rect x="93.6384%" y="69" width="0.0182%" height="15" fill="rgb(247,98,35)" fg:x="30940" fg:w="6"/><text x="93.8884%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (22 samples, 0.07%)</title><rect x="93.6566%" y="69" width="0.0666%" height="15" fill="rgb(247,138,52)" fg:x="30946" fg:w="22"/><text x="93.9066%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (22 samples, 0.07%)</title><rect x="93.6566%" y="53" width="0.0666%" height="15" fill="rgb(213,79,30)" fg:x="30946" fg:w="22"/><text x="93.9066%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (29 samples, 0.09%)</title><rect x="93.7231%" y="69" width="0.0878%" height="15" fill="rgb(246,177,23)" fg:x="30968" fg:w="29"/><text x="93.9731%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (28 samples, 0.08%)</title><rect x="93.7262%" y="53" width="0.0847%" height="15" fill="rgb(230,62,27)" fg:x="30969" fg:w="28"/><text x="93.9762%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (6 samples, 0.02%)</title><rect x="93.8139%" y="69" width="0.0182%" height="15" fill="rgb(216,154,8)" fg:x="30998" fg:w="6"/><text x="94.0639%" y="79.50"></text></g><g><title>libdispatch.dylib`DYLD-STUB$$semaphore_wait (9 samples, 0.03%)</title><rect x="93.8624%" y="37" width="0.0272%" height="15" fill="rgb(244,35,45)" fg:x="31014" fg:w="9"/><text x="94.1124%" y="47.50"></text></g><g><title>libdispatch.dylib`_dispatch_sema4_wait (6 samples, 0.02%)</title><rect x="93.8896%" y="37" width="0.0182%" height="15" fill="rgb(251,115,12)" fg:x="31023" fg:w="6"/><text x="94.1396%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`semaphore_wait (6 samples, 0.02%)</title><rect x="93.9078%" y="37" width="0.0182%" height="15" fill="rgb(240,54,50)" fg:x="31029" fg:w="6"/><text x="94.1578%" y="47.50"></text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::recv::_{{closure}} (2,103 samples, 6.36%)</title><rect x="93.5506%" y="85" width="6.3646%" height="15" fill="rgb(233,84,52)" fg:x="30911" fg:w="2103"/><text x="93.8006%" y="95.50">rust-1br..</text></g><g><title>rust-1brc`std::thread::park (2,010 samples, 6.08%)</title><rect x="93.8321%" y="69" width="6.0832%" height="15" fill="rgb(207,117,47)" fg:x="31004" fg:w="2010"/><text x="94.0821%" y="79.50">rust-1br..</text></g><g><title>libdispatch.dylib`_dispatch_semaphore_wait_slow (2,003 samples, 6.06%)</title><rect x="93.8533%" y="53" width="6.0620%" height="15" fill="rgb(249,43,39)" fg:x="31011" fg:w="2003"/><text x="94.1033%" y="63.50">libdispa..</text></g><g><title>libsystem_kernel.dylib`semaphore_wait_trap (1,979 samples, 5.99%)</title><rect x="93.9259%" y="37" width="5.9893%" height="15" fill="rgb(209,38,44)" fg:x="31035" fg:w="1979"/><text x="94.1759%" y="47.50">libsyste..</text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::recv (2,348 samples, 7.11%)</title><rect x="92.8122%" y="101" width="7.1061%" height="15" fill="rgb(236,212,23)" fg:x="30667" fg:w="2348"/><text x="93.0622%" y="111.50">rust-1brc`..</text></g><g><title>rust-1brc`std::sys_common::backtrace::__rust_begin_short_backtrace (27,263 samples, 82.51%)</title><rect x="17.4808%" y="117" width="82.5101%" height="15" fill="rgb(242,79,21)" fg:x="5776" fg:w="27263"/><text x="17.7308%" y="127.50">rust-1brc`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::send (24 samples, 0.07%)</title><rect x="99.9183%" y="101" width="0.0726%" height="15" fill="rgb(211,96,35)" fg:x="33015" fg:w="24"/><text x="100.1683%" y="111.50"></text></g><g><title>rust-1brc`core::ops::function::FnOnce::call_once{{vtable.shim}} (33,039 samples, 99.99%)</title><rect x="0.0030%" y="133" width="99.9909%" height="15" fill="rgb(253,215,40)" fg:x="1" fg:w="33039"/><text x="0.2530%" y="143.50">rust-1brc`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>all (33,042 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="33042"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (33,041 samples, 100.00%)</title><rect x="0.0030%" y="181" width="99.9970%" height="15" fill="rgb(208,190,38)" fg:x="1" fg:w="33041"/><text x="0.2530%" y="191.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (33,041 samples, 100.00%)</title><rect x="0.0030%" y="165" width="99.9970%" height="15" fill="rgb(235,213,38)" fg:x="1" fg:w="33041"/><text x="0.2530%" y="175.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust-1brc`std::sys::pal::unix::thread::Thread::new::thread_start (33,041 samples, 100.00%)</title><rect x="0.0030%" y="149" width="99.9970%" height="15" fill="rgb(237,122,38)" fg:x="1" fg:w="33041"/><text x="0.2530%" y="159.50">rust-1brc`std::sys::pal::unix::thread::Thread::new::thread_start</text></g></svg></svg>