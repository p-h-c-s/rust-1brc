<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="245.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="245.00"> </text><svg id="frames" x="10" width="1180" total_samples="17681"><g><title>libsystem_kernel.dylib`__exit (23 samples, 0.13%)</title><rect x="0.0000%" y="197" width="0.1301%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="23"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (589 samples, 3.33%)</title><rect x="0.1301%" y="133" width="3.3313%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="589"/><text x="0.3801%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (92 samples, 0.52%)</title><rect x="3.4613%" y="133" width="0.5203%" height="15" fill="rgb(221,193,54)" fg:x="612" fg:w="92"/><text x="3.7113%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,734 samples, 9.81%)</title><rect x="3.9817%" y="133" width="9.8071%" height="15" fill="rgb(248,212,6)" fg:x="704" fg:w="1734"/><text x="4.2317%" y="143.50">libsystem_plat..</text></g><g><title>rust-1brc`&lt;alloc::string::String as core::clone::Clone&gt;::clone (37 samples, 0.21%)</title><rect x="13.7888%" y="133" width="0.2093%" height="15" fill="rgb(208,68,35)" fg:x="2438" fg:w="37"/><text x="14.0388%" y="143.50"></text></g><g><title>rust-1brc`DYLD-STUB$$free (108 samples, 0.61%)</title><rect x="13.9981%" y="133" width="0.6108%" height="15" fill="rgb(232,128,0)" fg:x="2475" fg:w="108"/><text x="14.2481%" y="143.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcmp (458 samples, 2.59%)</title><rect x="14.6089%" y="133" width="2.5904%" height="15" fill="rgb(207,160,47)" fg:x="2583" fg:w="458"/><text x="14.8589%" y="143.50">ru..</text></g><g><title>rust-1brc`rust_1brc::StationData::parse_data (65 samples, 0.37%)</title><rect x="17.1993%" y="133" width="0.3676%" height="15" fill="rgb(228,23,34)" fg:x="3041" fg:w="65"/><text x="17.4493%" y="143.50"></text></g><g><title>rust-1brc`std::io::append_to_string (107 samples, 0.61%)</title><rect x="17.5669%" y="133" width="0.6052%" height="15" fill="rgb(218,30,26)" fg:x="3106" fg:w="107"/><text x="17.8169%" y="143.50"></text></g><g><title>rust-1brc`std::sync::mpmc::Sender&lt;T&gt;::send (61 samples, 0.35%)</title><rect x="18.1720%" y="133" width="0.3450%" height="15" fill="rgb(220,122,19)" fg:x="3213" fg:w="61"/><text x="18.4220%" y="143.50"></text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::recv (67 samples, 0.38%)</title><rect x="18.5171%" y="133" width="0.3789%" height="15" fill="rgb(250,228,42)" fg:x="3274" fg:w="67"/><text x="18.7671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.03%)</title><rect x="37.6393%" y="117" width="0.0339%" height="15" fill="rgb(240,193,28)" fg:x="6655" fg:w="6"/><text x="37.8893%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.02%)</title><rect x="37.6732%" y="117" width="0.0226%" height="15" fill="rgb(216,20,37)" fg:x="6661" fg:w="4"/><text x="37.9232%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (574 samples, 3.25%)</title><rect x="37.6958%" y="117" width="3.2464%" height="15" fill="rgb(206,188,39)" fg:x="6665" fg:w="574"/><text x="37.9458%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (877 samples, 4.96%)</title><rect x="40.9423%" y="117" width="4.9601%" height="15" fill="rgb(217,207,13)" fg:x="7239" fg:w="877"/><text x="41.1923%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.02%)</title><rect x="45.9024%" y="117" width="0.0170%" height="15" fill="rgb(231,73,38)" fg:x="8116" fg:w="3"/><text x="46.1524%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="45.9193%" y="117" width="0.0113%" height="15" fill="rgb(225,20,46)" fg:x="8119" fg:w="2"/><text x="46.1693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (168 samples, 0.95%)</title><rect x="45.9363%" y="117" width="0.9502%" height="15" fill="rgb(210,31,41)" fg:x="8122" fg:w="168"/><text x="46.1863%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (167 samples, 0.94%)</title><rect x="45.9420%" y="101" width="0.9445%" height="15" fill="rgb(221,200,47)" fg:x="8123" fg:w="167"/><text x="46.1920%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (167 samples, 0.94%)</title><rect x="45.9420%" y="85" width="0.9445%" height="15" fill="rgb(226,26,5)" fg:x="8123" fg:w="167"/><text x="46.1920%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (696 samples, 3.94%)</title><rect x="46.8865%" y="117" width="3.9364%" height="15" fill="rgb(249,33,26)" fg:x="8290" fg:w="696"/><text x="47.1365%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.03%)</title><rect x="50.8229%" y="117" width="0.0283%" height="15" fill="rgb(235,183,28)" fg:x="8986" fg:w="5"/><text x="51.0729%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (356 samples, 2.01%)</title><rect x="50.8512%" y="117" width="2.0135%" height="15" fill="rgb(221,5,38)" fg:x="8991" fg:w="356"/><text x="51.1012%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.06%)</title><rect x="52.8647%" y="117" width="0.0622%" height="15" fill="rgb(247,18,42)" fg:x="9347" fg:w="11"/><text x="53.1147%" y="127.50"></text></g><g><title>rust-1brc`&lt;alloc::string::String as core::clone::Clone&gt;::clone (392 samples, 2.22%)</title><rect x="52.9269%" y="117" width="2.2171%" height="15" fill="rgb(241,131,45)" fg:x="9358" fg:w="392"/><text x="53.1769%" y="127.50">r..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (327 samples, 1.85%)</title><rect x="53.2945%" y="101" width="1.8494%" height="15" fill="rgb(249,31,29)" fg:x="9423" fg:w="327"/><text x="53.5445%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (195 samples, 1.10%)</title><rect x="54.0411%" y="85" width="1.1029%" height="15" fill="rgb(225,111,53)" fg:x="9555" fg:w="195"/><text x="54.2911%" y="95.50"></text></g><g><title>rust-1brc`DYLD-STUB$$malloc (99 samples, 0.56%)</title><rect x="55.1439%" y="117" width="0.5599%" height="15" fill="rgb(238,160,17)" fg:x="9750" fg:w="99"/><text x="55.3939%" y="127.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcpy (20 samples, 0.11%)</title><rect x="55.7039%" y="117" width="0.1131%" height="15" fill="rgb(214,148,48)" fg:x="9849" fg:w="20"/><text x="55.9539%" y="127.50"></text></g><g><title>rust-1brc`__rdl_alloc (59 samples, 0.33%)</title><rect x="55.8170%" y="117" width="0.3337%" height="15" fill="rgb(232,36,49)" fg:x="9869" fg:w="59"/><text x="56.0670%" y="127.50"></text></g><g><title>rust-1brc`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (51 samples, 0.29%)</title><rect x="56.1563%" y="117" width="0.2884%" height="15" fill="rgb(209,103,24)" fg:x="9929" fg:w="51"/><text x="56.4063%" y="127.50"></text></g><g><title>rust-1brc`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (101 samples, 0.57%)</title><rect x="56.4448%" y="117" width="0.5712%" height="15" fill="rgb(229,88,8)" fg:x="9980" fg:w="101"/><text x="56.6948%" y="127.50"></text></g><g><title>rust-1brc`core::str::converts::from_utf8 (31 samples, 0.18%)</title><rect x="57.0217%" y="117" width="0.1753%" height="15" fill="rgb(213,181,19)" fg:x="10082" fg:w="31"/><text x="57.2717%" y="127.50"></text></g><g><title>rust-1brc`core::str::pattern::StrSearcher::new (115 samples, 0.65%)</title><rect x="57.1970%" y="117" width="0.6504%" height="15" fill="rgb(254,191,54)" fg:x="10113" fg:w="115"/><text x="57.4470%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (117 samples, 0.66%)</title><rect x="66.9532%" y="101" width="0.6617%" height="15" fill="rgb(241,83,37)" fg:x="11838" fg:w="117"/><text x="67.2032%" y="111.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcmp (41 samples, 0.23%)</title><rect x="67.6150%" y="101" width="0.2319%" height="15" fill="rgb(233,36,39)" fg:x="11955" fg:w="41"/><text x="67.8650%" y="111.50"></text></g><g><title>rust-1brc`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (707 samples, 4.00%)</title><rect x="67.8468%" y="101" width="3.9986%" height="15" fill="rgb(226,3,54)" fg:x="11996" fg:w="707"/><text x="68.0968%" y="111.50">rust..</text></g><g><title>rust-1brc`core::num::dec2flt::parse::parse_number (480 samples, 2.71%)</title><rect x="69.1307%" y="85" width="2.7148%" height="15" fill="rgb(245,192,40)" fg:x="12223" fg:w="480"/><text x="69.3807%" y="95.50">ru..</text></g><g><title>rust-1brc`core::num::dec2flt::parse::parse_number (26 samples, 0.15%)</title><rect x="71.8455%" y="101" width="0.1471%" height="15" fill="rgb(238,167,29)" fg:x="12703" fg:w="26"/><text x="72.0955%" y="111.50"></text></g><g><title>rust-1brc`rust_1brc::StationData::parse_data (2,887 samples, 16.33%)</title><rect x="57.8474%" y="117" width="16.3283%" height="15" fill="rgb(232,182,51)" fg:x="10228" fg:w="2887"/><text x="58.0974%" y="127.50">rust-1brc`rust_1brc::Stat..</text></g><g><title>rust-1brc`core::str::pattern::StrSearcher::new (386 samples, 2.18%)</title><rect x="71.9925%" y="101" width="2.1831%" height="15" fill="rgb(231,60,39)" fg:x="12729" fg:w="386"/><text x="72.2425%" y="111.50">r..</text></g><g><title>libsystem_kernel.dylib`read (222 samples, 1.26%)</title><rect x="75.8950%" y="101" width="1.2556%" height="15" fill="rgb(208,69,12)" fg:x="13419" fg:w="222"/><text x="76.1450%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (267 samples, 1.51%)</title><rect x="77.1506%" y="101" width="1.5101%" height="15" fill="rgb(235,93,37)" fg:x="13641" fg:w="267"/><text x="77.4006%" y="111.50"></text></g><g><title>rust-1brc`DYLD-STUB$$memcpy (26 samples, 0.15%)</title><rect x="78.6607%" y="101" width="0.1471%" height="15" fill="rgb(213,116,39)" fg:x="13908" fg:w="26"/><text x="78.9107%" y="111.50"></text></g><g><title>rust-1brc`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (92 samples, 0.52%)</title><rect x="78.8078%" y="101" width="0.5203%" height="15" fill="rgb(222,207,29)" fg:x="13934" fg:w="92"/><text x="79.0578%" y="111.50"></text></g><g><title>rust-1brc`core::slice::memchr::memchr_aligned (1,546 samples, 8.74%)</title><rect x="79.3281%" y="101" width="8.7438%" height="15" fill="rgb(206,96,30)" fg:x="14026" fg:w="1546"/><text x="79.5781%" y="111.50">rust-1brc`co..</text></g><g><title>rust-1brc`std::io::append_to_string (3,038 samples, 17.18%)</title><rect x="74.1757%" y="117" width="17.1823%" height="15" fill="rgb(218,138,4)" fg:x="13115" fg:w="3038"/><text x="74.4257%" y="127.50">rust-1brc`std::io::append_t..</text></g><g><title>rust-1brc`core::str::converts::from_utf8 (581 samples, 3.29%)</title><rect x="88.0719%" y="101" width="3.2860%" height="15" fill="rgb(250,191,14)" fg:x="15572" fg:w="581"/><text x="88.3219%" y="111.50">rus..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="91.7539%" y="101" width="0.0452%" height="15" fill="rgb(239,60,40)" fg:x="16223" fg:w="8"/><text x="92.0039%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.02%)</title><rect x="91.8104%" y="101" width="0.0226%" height="15" fill="rgb(206,27,48)" fg:x="16233" fg:w="4"/><text x="92.0604%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (192 samples, 1.09%)</title><rect x="91.8330%" y="101" width="1.0859%" height="15" fill="rgb(225,35,8)" fg:x="16237" fg:w="192"/><text x="92.0830%" y="111.50"></text></g><g><title>rust-1brc`DYLD-STUB$$bzero (2 samples, 0.01%)</title><rect x="92.9190%" y="101" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="16429" fg:w="2"/><text x="93.1690%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (7 samples, 0.04%)</title><rect x="94.7854%" y="69" width="0.0396%" height="15" fill="rgb(247,123,22)" fg:x="16759" fg:w="7"/><text x="95.0354%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (2 samples, 0.01%)</title><rect x="94.8985%" y="53" width="0.0113%" height="15" fill="rgb(231,138,38)" fg:x="16779" fg:w="2"/><text x="95.1485%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.01%)</title><rect x="94.8985%" y="37" width="0.0113%" height="15" fill="rgb(231,145,46)" fg:x="16779" fg:w="2"/><text x="95.1485%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.06%)</title><rect x="94.9098%" y="53" width="0.0566%" height="15" fill="rgb(251,118,11)" fg:x="16781" fg:w="10"/><text x="95.1598%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.40%)</title><rect x="94.7458%" y="85" width="0.3959%" height="15" fill="rgb(217,147,25)" fg:x="16752" fg:w="70"/><text x="94.9958%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (55 samples, 0.31%)</title><rect x="94.8306%" y="69" width="0.3111%" height="15" fill="rgb(247,81,37)" fg:x="16767" fg:w="55"/><text x="95.0806%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.16%)</title><rect x="94.9777%" y="53" width="0.1640%" height="15" fill="rgb(209,12,38)" fg:x="16793" fg:w="29"/><text x="95.2277%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.02%)</title><rect x="95.1191%" y="37" width="0.0226%" height="15" fill="rgb(227,1,9)" fg:x="16818" fg:w="4"/><text x="95.3691%" y="47.50"></text></g><g><title>rust-1brc`std::sync::mpmc::Sender&lt;T&gt;::send (675 samples, 3.82%)</title><rect x="91.3580%" y="117" width="3.8177%" height="15" fill="rgb(248,47,43)" fg:x="16153" fg:w="675"/><text x="91.6080%" y="127.50">rust..</text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::send (396 samples, 2.24%)</title><rect x="92.9359%" y="101" width="2.2397%" height="15" fill="rgb(221,10,30)" fg:x="16432" fg:w="396"/><text x="93.1859%" y="111.50">r..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.03%)</title><rect x="95.1417%" y="85" width="0.0339%" height="15" fill="rgb(210,229,1)" fg:x="16822" fg:w="6"/><text x="95.3917%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.02%)</title><rect x="98.1901%" y="101" width="0.0226%" height="15" fill="rgb(222,148,37)" fg:x="17361" fg:w="4"/><text x="98.4401%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (3 samples, 0.02%)</title><rect x="98.3429%" y="85" width="0.0170%" height="15" fill="rgb(234,67,33)" fg:x="17388" fg:w="3"/><text x="98.5929%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (19 samples, 0.11%)</title><rect x="98.5182%" y="69" width="0.1075%" height="15" fill="rgb(247,98,35)" fg:x="17419" fg:w="19"/><text x="98.7682%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (19 samples, 0.11%)</title><rect x="98.5182%" y="53" width="0.1075%" height="15" fill="rgb(247,138,52)" fg:x="17419" fg:w="19"/><text x="98.7682%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (4 samples, 0.02%)</title><rect x="98.6256%" y="69" width="0.0226%" height="15" fill="rgb(213,79,30)" fg:x="17438" fg:w="4"/><text x="98.8756%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.10%)</title><rect x="98.6483%" y="69" width="0.1018%" height="15" fill="rgb(246,177,23)" fg:x="17442" fg:w="18"/><text x="98.8983%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.08%)</title><rect x="98.7501%" y="69" width="0.0848%" height="15" fill="rgb(230,62,27)" fg:x="17460" fg:w="15"/><text x="99.0001%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (5 samples, 0.03%)</title><rect x="98.8349%" y="69" width="0.0283%" height="15" fill="rgb(216,154,8)" fg:x="17475" fg:w="5"/><text x="99.0849%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (29 samples, 0.16%)</title><rect x="98.8632%" y="69" width="0.1640%" height="15" fill="rgb(244,35,45)" fg:x="17480" fg:w="29"/><text x="99.1132%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.16%)</title><rect x="98.8688%" y="53" width="0.1584%" height="15" fill="rgb(251,115,12)" fg:x="17481" fg:w="28"/><text x="99.1188%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (198 samples, 1.12%)</title><rect x="98.2128%" y="101" width="1.1198%" height="15" fill="rgb(240,54,50)" fg:x="17365" fg:w="198"/><text x="98.4628%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (172 samples, 0.97%)</title><rect x="98.3598%" y="85" width="0.9728%" height="15" fill="rgb(233,84,52)" fg:x="17391" fg:w="172"/><text x="98.6098%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (54 samples, 0.31%)</title><rect x="99.0272%" y="69" width="0.3054%" height="15" fill="rgb(207,117,47)" fg:x="17509" fg:w="54"/><text x="99.2772%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (53 samples, 0.30%)</title><rect x="99.0329%" y="53" width="0.2998%" height="15" fill="rgb(249,43,39)" fg:x="17510" fg:w="53"/><text x="99.2829%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.01%)</title><rect x="99.3326%" y="101" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="17563" fg:w="2"/><text x="99.5826%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (44 samples, 0.25%)</title><rect x="99.3439%" y="101" width="0.2489%" height="15" fill="rgb(236,212,23)" fg:x="17565" fg:w="44"/><text x="99.5939%" y="111.50"></text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::recv (783 samples, 4.43%)</title><rect x="95.1756%" y="117" width="4.4285%" height="15" fill="rgb(242,79,21)" fg:x="16828" fg:w="783"/><text x="95.4256%" y="127.50">rust-..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (2 samples, 0.01%)</title><rect x="99.5928%" y="101" width="0.0113%" height="15" fill="rgb(211,96,35)" fg:x="17609" fg:w="2"/><text x="99.8428%" y="111.50"></text></g><g><title>all (17,681 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="17681"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (17,658 samples, 99.87%)</title><rect x="0.1301%" y="197" width="99.8699%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="17658"/><text x="0.3801%" y="207.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (17,658 samples, 99.87%)</title><rect x="0.1301%" y="181" width="99.8699%" height="15" fill="rgb(208,190,38)" fg:x="23" fg:w="17658"/><text x="0.3801%" y="191.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust-1brc`std::sys::pal::unix::thread::Thread::new::thread_start (17,658 samples, 99.87%)</title><rect x="0.1301%" y="165" width="99.8699%" height="15" fill="rgb(235,213,38)" fg:x="23" fg:w="17658"/><text x="0.3801%" y="175.50">rust-1brc`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>rust-1brc`core::ops::function::FnOnce::call_once{{vtable.shim}} (17,658 samples, 99.87%)</title><rect x="0.1301%" y="149" width="99.8699%" height="15" fill="rgb(237,122,38)" fg:x="23" fg:w="17658"/><text x="0.3801%" y="159.50">rust-1brc`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rust-1brc`std::sys_common::backtrace::__rust_begin_short_backtrace (14,340 samples, 81.10%)</title><rect x="18.8960%" y="133" width="81.1040%" height="15" fill="rgb(244,218,35)" fg:x="3341" fg:w="14340"/><text x="19.1460%" y="143.50">rust-1brc`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust-1brc`std::sync::mpmc::list::Channel&lt;T&gt;::send (70 samples, 0.40%)</title><rect x="99.6041%" y="117" width="0.3959%" height="15" fill="rgb(240,68,47)" fg:x="17611" fg:w="70"/><text x="99.8541%" y="127.50"></text></g></svg></svg>